{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<pre><code>/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n\n                    ____                __                 __           __  _           \n                   / __ \\___  ___   ___/ /__ ___ __  ___ _/ /_  ___ _  / /_(_)_ _  ___  \n                  / /_/ / _ \\/ -_) / _  / _ `/ // / / _ `/ __/ / _ `/ / __/ /  ' \\/ -_) \n                  \\____/_//_/\\__/  \\_,_/\\_,_/\\_, /  \\_,_/\\__/  \\_,_/  \\__/_/_/_/_/\\__(_)\n                                            /___/                                       \n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n</code></pre>"},{"location":"aws/aws/","title":"Notes","text":""},{"location":"aws/aws/#aws-security-identity-compliance-services","title":"AWS Security, Identity, &amp; Compliance services","text":"Identity and access management <ul> <li>AWS Identity and Access Management (IAM)</li> <li>AWS IAM Identity Center (successor to SSO)</li> <li>Amazon Cognito</li> <li>Amazon Verified Permissions</li> <li>AWS Directory Service</li> <li>AWS Resource Access Manager</li> <li>AWS Organizations</li> </ul> Detection and response <ul> <li>Amazon GuardDuty</li> <li>Amazon Inspector</li> <li>AWS Security Hub</li> <li>Amazon Security Lake</li> <li>Amazon Detective</li> <li>AWS Config</li> <li>Amazon CloudWatch</li> <li>AWS CloudTrail</li> <li>AWS IoT Device Defender</li> <li>AWS Elastic Disaster Recovery</li> </ul> Network and application protection <ul> <li>AWS Firewall Manager</li> <li>AWS Network Firewall</li> <li>AWS Shield</li> <li>AWS Verified Access</li> <li>AWS Web Application Firewall (WAF)</li> <li>Amazon Route 53 Resolver DNS Firewall</li> </ul> Data protection <ul> <li>Amazon Macie</li> <li>AWS Key Management Service (AWS KMS)</li> <li>AWS CloudHSM</li> <li>AWS Certificate Manager</li> <li>AWS Payment Cryptography</li> <li>AWS Private Certificate Authority</li> <li>AWS Secrets Manager</li> </ul> Compliance <ul> <li>AWS Artifact</li> <li>AWS Audit Manager</li> </ul>"},{"location":"aws/aws/#aws-networking-and-content-delivery-services","title":"AWS networking and content delivery services","text":"Network foundations <ul> <li>Amazon VPC</li> <li>AWS Transit Gateway</li> <li>AWS PrivateLink</li> </ul> Application networking <ul> <li>Amazon VPC Lattice</li> <li>AWS AppMesh</li> <li>AWS API Gateway</li> <li>AWS Cloud Map</li> <li>Elastic Load Balancing</li> </ul> Edge networking <ul> <li>Amazon CloudFront</li> <li>Amazon Route 53</li> <li>AWS Global Accelerator</li> </ul> Hybrid connectivity <ul> <li>AWS Direct Connect</li> <li>AWS Site-to-Site VPN</li> <li>AWS Client VPN</li> <li>AWS Cloud WAN</li> </ul> Network security <ul> <li>AWS Shield</li> <li>AWS WAF</li> <li>AWS Network Firewall</li> <li>AWS Firewall Manager</li> </ul>"},{"location":"aws/aws/#aws-compute-services","title":"AWS compute services","text":"Instances (virtual machines) <ul> <li>Amazon Elastic Compute Cloud (EC2)</li> <li>Amazon EC2 Spot</li> <li>Amazon EC2 Autoscaling</li> <li>Amazon Lightsail Icon Amazon Lightsail</li> <li>AWS Batch</li> </ul> Containers <ul> <li>Amazon Elastic Container Service (ECS)</li> <li>Amazon ECS Anywhere</li> <li>Amazon Elastic Container Registry (ECR)</li> <li>EKS Amazon Elastic Kubernetes Service (EKS)</li> <li>Amazon EKS Anywhere</li> <li>AWS Fargate</li> <li>AWS App Runner</li> </ul> Serverless <ul> <li>AWS Lambda</li> </ul> Edge and hybrid <ul> <li>Outposts AWS Outposts</li> <li>Snowball Edge AWS Snow Family</li> <li>Wavelength AWS Wavelength</li> <li>VMWare VMware Cloud on AWS</li> <li>Local Zones AWS Local Zones</li> </ul> Cost and capacity management <ul> <li>Savings Plan AWS Savings Plan</li> <li>AWS Compute Optimizer</li> <li>AWS Elastic Beanstalk</li> <li>EC2 Image Builder</li> <li>Elastic Load Balancing (ELB)</li> </ul>"},{"location":"aws/aws/#aws-storage-services","title":"AWS storage services","text":"Object, file, and block storage <ul> <li>Amazon Simple Storage Service (S3)</li> <li>Amazon Elastic File System (EFS)</li> <li>Amazon FSx</li> <li>Amazon Elastic Block Store (EBS)</li> <li>Amazon File Cache</li> </ul> Data migration <ul> <li>AWS DataSync</li> <li>AWS Snow Family</li> </ul> Hybrid cloud storage and edge computing <ul> <li>AWS Storage Gateway</li> <li>AWS Snow Family</li> </ul> Managed file transfer <ul> <li>AWS Transfer Family</li> </ul> Disaster recovery and backup <ul> <li>AWS Elastic Disaster Recovery (DRS)</li> <li>AWS Backup</li> </ul>"},{"location":"k8s/k8s_quiz/","title":"Quiz","text":""},{"location":"k8s/k8s_quiz/#kubernetes-basics","title":"Kubernetes Basics","text":"What is Kubernetes? <ul> <li>Open-source container orchestration platform.</li> <li>Designed to automate the deployment, scaling, and management of containerized applications.</li> </ul> Kubernetes architecture <p>Master Components:</p> <ol> <li> <p>kube-apiserver (1)</p> </li> <li> <p>etcd (2)</p> </li> <li> <p>kube-controller-manager (3)</p> </li> <li> <p>kube-scheduler (4)</p> </li> <li> <p>cloud-controller-manager (5)</p> </li> </ol> <p>Node Components:</p> <ol> <li> <p>kubelet (6)</p> </li> <li> <p>Container Runtime (7)</p> </li> <li> <p>kube-proxy (8)</p> </li> <li> <p>Pod (9)</p> </li> </ol> <p>Add-ons:</p> <ol> <li>DNS (10)</li> <li>Ingress Controller (11)</li> </ol> <ol> <li> <ul> <li>Central component that exposes the Kubernetes API.</li> <li>Acts as the frontend for the Kubernetes control plane.</li> </ul> </li> <li> <ul> <li>Consistent and highly-available key value store.</li> <li>Stores cluster state and configuration data.</li> </ul> </li> <li> <ul> <li>Manages controller processes.</li> <li>Controllers are responsible for maintaining the desired state of the cluster.</li> </ul> </li> <li> <ul> <li>Watches for newly created Pods and selects a node for them to run on.</li> </ul> </li> <li> <ul> <li>Serves as an interface between Kubernetes and the cloud provider's APIs.</li> </ul> </li> <li> <ul> <li>An agent that runs on each node in the cluster.</li> <li>Ensures that containers are running in a Pod.</li> <li>Communicates with the API server.</li> <li>Reports node's status back to the control plane.</li> </ul> </li> <li> <ul> <li>Responsible for pulling container images from a registry and running containers.</li> </ul> </li> <li> <ul> <li>Network proxy, responsible for managing network connectivity.</li> <li>Enables communication between pods, services, and external entities.</li> <li>Provides load balancing for services.</li> </ul> </li> <li> <ul> <li>Smallest deployable unit in Kubernetes.</li> <li>A pod can contain one or more containers sharing the same network namespace and storage.</li> </ul> </li> <li> <ul> <li>Provides DNS-based service discovery.</li> <li>Allows services to be accessed by their DNS names.</li> </ul> </li> <li> <ul> <li>Manages external access to services within the cluster.</li> </ul> </li> </ol>"},{"location":"k8s/k8s_quiz/#pods","title":"Pods","text":"Why pods are considered the basic building blocks in Kubernetes? <p>Pods encapsulate and co-locate one or more containers, providing a unified unit for deployment, scaling, and resource sharing.</p> Discuss the phases a pod goes through? <p>Pod phases:</p> <ul> <li>Pending (1)</li> <li>Running (2)</li> <li>Succeeded (3)</li> <li>Failed (4)</li> <li>Unknown (5)</li> </ul> <ol> <li>The Pod has been accepted by the Kubernetes cluster but is awaiting resource allocation, scheduling, and container image downloads.</li> <li>The Pod has been assigned to a node, and all containers have been created, and at least one container is currently running or in the process of starting or restarting.</li> <li>All containers in the Pod have terminated in success, and will not be restarted.</li> <li>At least one container in the Pod has terminated with a failure.</li> <li>For some reason the state of the Pod cannot be determined.</li> </ol>"},{"location":"python/drill-down/fastapi/ultimate-fastapi-tutorial/part-01-hello-world/run/","title":"run.sh","text":"<pre><code>#!/bin/sh\n\nexport APP_MODULE=${APP_MODULE-app.main:app}  # (1)\nexport HOST=${HOST:-0.0.0.0}  # (2)\nexport PORT=${PORT:-8001}\n\nexec uvicorn --reload --host $HOST --port $PORT \"$APP_MODULE\"\n</code></pre> <ol> <li><code>${VAR-default}:</code> If VAR is unset <code>export APP_MODULE=${APP_MODULE}</code> or null, use the default value. Will treat an empty string as a valid value and not use the default. </li> <li><code>${VAR:-default}:</code> If VAR is unset or null, or set but empty, use the default value. Will include empty strings as cases where the default should be used.</li> </ol>"},{"location":"python/drill-down/fastapi/ultimate-fastapi-tutorial/part-01-hello-world/app/main/","title":"main.py","text":"<pre><code>from fastapi import FastAPI, APIRouter  # (1)\n\n# Create a FastAPI instance with a title and specify the OpenAPI URL\napp = FastAPI(title=\"Recipe API\", openapi_url=\"/openapi.json\")  # (2)\n\n# Create an APIRouter instance to organize API routes\napi_router = APIRouter()\n\n# Define a route on the APIRouter for the root endpoint (\"/\") with a GET method and a status code of 200\n@api_router.get(\"/\", status_code=200)\ndef root() -&gt; dict:  # (3)\n    \"\"\"\n    Root GET\n    \"\"\"\n    return {\"msg\": \"Hello, World!\"}\n\n# Include the APIRouter into the main FastAPI application\napp.include_router(api_router)  # (4)\n\n# Check if the script is being run as the main program\nif __name__ == \"__main__\":  # (5)\n    # Use this for debugging purposes only\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8001, log_level=\"debug\")\n</code></pre> <ol> <li><code>APIRouter</code> is used to modularize and organize routes in a FastAPI application, providing better code structure, maintainability, and reusability as the application grows in complexity.</li> <li>FastAPI will automatically generate and expose the OpenAPI documentation for our API at the specified path (<code>/openapi.json</code>).</li> <li>Path operator function (as it is associated with a specific path and HTTP method)</li> <li><code>app.include_router(api_router)</code> integrates the routes defined in <code>api_router</code> into the main FastAPI application, making those routes accessible through the application.</li> <li>The <code>if __name__ == \"__main__\":</code> check in a Python script is used to determine whether the script is being run as the main program or if it's being imported as a module into another script.</li> </ol> Note <p>Title: FastAPI Recipe API</p> <p>Summary: The provided code defines a simple FastAPI application with a single endpoint that returns a \"Hello, World!\" message. It also includes a router to organize API routes.</p> <ol> <li> <p>Imports:</p> <ul> <li>Imports FastAPI and (1) APIRouter from the FastAPI framework.</li> </ul> </li> <li> <p>App Initialization:</p> <ul> <li>Creates a FastAPI app instance named app.</li> <li>Sets the app's title as \"Recipe API\" and specifies the OpenAPI documentation URL.</li> </ul> </li> <li> <p>API Router Initialization:</p> <ul> <li>Creates an API router instance named api_router using APIRouter().</li> </ul> </li> <li> <p>Root Endpoint:</p> <ul> <li>Defines a root endpoint using the @api_router.get decorator.</li> <li>The endpoint returns a dictionary with a \"msg\" key and the value \"Hello, World!\".</li> <li>Specifies a 200 status code for a successful response.</li> </ul> </li> <li> <p>Include Router in App:</p> <ul> <li>Includes the api_router in the main app using the app.include_router(api_router) statement.</li> </ul> </li> <li> <p>Debugging Configuration:</p> <ul> <li>Checks if the script is being run as the main module (name == \"main\").</li> <li>If true, runs the FastAPI app using the uvicorn server for debugging purposes.</li> <li>Configures uvicorn to run on host \"0.0.0.0\" and port 8001, with a log level of \"debug\".</li> </ul> </li> </ol> <p>Usage: The FastAPI app serves a single endpoint (\"/\") that responds with a \"Hello, World!\" message. The app can be run locally for debugging using the provided if name == \"main\" block.</p> <p>Note: The provided code is a basic example and can be extended to include more complex API routes and functionality.</p> <ol> <li><code>APIRouter</code> provides benefits like modularization, route prefixing, dependency injection, reusability, etc.</li> </ol>"},{"location":"python/drill-down/fastapi/ultimate-fastapi-tutorial/part-07-database/app/crud/base/","title":"Send Email in Background","text":"<pre><code>from typing import Any, Dict, Generic, List, Optional, Type, TypeVar, Union\n\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\nfrom sqlalchemy.orm import Session\n\nfrom app.db.base_class import Base\n\nModelType = TypeVar(\"ModelType\", bound=Base)\nCreateSchemaType = TypeVar(\"CreateSchemaType\", bound=BaseModel)\nUpdateSchemaType = TypeVar(\"UpdateSchemaType\", bound=BaseModel)\n\n\nclass CRUDBase(Generic[ModelType, CreateSchemaType, UpdateSchemaType]):\n    def __init__(self, model: Type[ModelType]):\n        \"\"\"\n        CRUD object with default methods to Create, Read, Update, Delete (CRUD).\n        **Parameters**\n        * `model`: A SQLAlchemy model class\n        * `schema`: A Pydantic model (schema) class\n        \"\"\"\n        self.model = model\n\n    def get(self, db: Session, id: Any) -&gt; Optional[ModelType]:\n        return db.query(self.model).filter(self.model.id == id).first()\n\n    def get_multi(\n        self, db: Session, *, skip: int = 0, limit: int = 100\n    ) -&gt; List[ModelType]:\n        return db.query(self.model).offset(skip).limit(limit).all()\n\n    def create(self, db: Session, *, obj_in: CreateSchemaType) -&gt; ModelType:\n        obj_in_data = jsonable_encoder(obj_in)\n        db_obj = self.model(**obj_in_data)  # type: ignore\n        db.add(db_obj)\n        db.commit()\n        db.refresh(db_obj)\n        return db_obj\n\n    def update(\n        self,\n        db: Session,\n        *,\n        db_obj: ModelType,\n        obj_in: Union[UpdateSchemaType, Dict[str, Any]]\n    ) -&gt; ModelType:\n        obj_data = jsonable_encoder(db_obj)\n        if isinstance(obj_in, dict):\n            update_data = obj_in\n        else:\n            update_data = obj_in.dict(exclude_unset=True)\n        for field in obj_data:\n            if field in update_data:\n                setattr(db_obj, field, update_data[field])\n        db.add(db_obj)\n        db.commit()\n        db.refresh(db_obj)\n        return db_obj\n\n    def remove(self, db: Session, *, id: int) -&gt; ModelType:\n        obj = db.query(self.model).get(id)\n        db.delete(obj)\n        db.commit()\n        return obj\n</code></pre> Note <p>Title: CRUD Base Implementation with Type Hints</p> <p>Summary: The provided code defines a generic CRUD (Create, Read, Update, Delete) base class, <code>CRUDBase</code>, using type hints for flexibility and  clarity. It is designed to work with SQLAlchemy models and Pydantic schemas.</p> <ol> <li> <p>Imports:</p> <ul> <li>The code imports various types and modules, including <code>Any</code>, <code>Dict</code>, (1) <code>Generic</code>, <code>List</code>, <code>Optional</code>, <code>Type</code>, (2) <code>TypeVar</code>, and <code>Union</code>.</li> <li>It uses <code>jsonable_encoder</code> from  <code>fastapi.encoders</code>, <code>BaseModel</code> from <code>pydantic</code>, and <code>Session</code> from <code>sqlalchemy.orm</code>.</li> <li><code>ModelType</code>, <code>CreateSchemaType</code>, and <code>UpdateSchemaType</code> are defined as type variables (<code>TypeVar</code>) for flexibility in generic class  definition.</li> </ul> </li> <li> <p>Type Variables:</p> <ul> <li><code>ModelType</code>: Represents the SQLAlchemy model type bound to the <code>Base</code> class.</li> <li><code>CreateSchemaType</code>: Represents the type of Pydantic schema used for creating objects.</li> <li><code>UpdateSchemaType</code>: Represents the type of Pydantic schema used for updating objects.</li> </ul> </li> <li> <p>CRUDBase Class:</p> <ul> <li>Initialization:</li> <li>Takes a <code>model</code> parameter, which is a SQLAlchemy model class.</li> <li>Methods:</li> <li><code>get</code>: Retrieves a single object by ID from the database.</li> <li><code>get_multi</code>: Retrieves a list of objects with optional pagination parameters.</li> <li><code>create</code>: Creates a new object in the database using a Pydantic schema.</li> <li><code>update</code>: Updates an object in the database using a Pydantic schema or a dictionary.</li> <li><code>remove</code>: Deletes an object from the database by ID.</li> </ul> </li> <li> <p>Method Details:</p> <ul> <li><code>get</code>: Queries the database using the model's ID field.</li> <li><code>get_multi</code>: Queries the database with optional skip and limit parameters.</li> <li><code>create</code>: Converts the Pydantic schema into JSON, creates a new object, and commits it to the database.</li> <li><code>update</code>: Converts the object and input data into JSON, updates the object's fields, and commits changes.</li> <li><code>remove</code>: Deletes an object from the database.</li> </ul> </li> </ol> <p>Usage: This generic <code>CRUDBase</code> class can be used as a base class for specific CRUD implementations for different SQLAlchemy models and Pydantic  schemas. It provides reusable and type-safe methods for common database operations.</p> <ol> <li><code>Generic</code> allows us to create generic classes or functions that can work with different types while preserving type hints. By using Generic, we can define classes or functions with type parameters that are only resolved when an instance or function call is made. It is particularly useful for creating reusable and type-safe code that can operate on a variety of types.</li> <li><code>TypeVar</code> is used to declare a placeholder for a type that will be specified later. It allows us to create functions or classes that can work with different types without specifying the exact type until it is used. <code>TypeVar</code> can have an optional bound parameter, which restricts the type to a particular base class or type.</li> </ol>"},{"location":"python/dsa/leetcode/","title":"Leetcode","text":""},{"location":"python/dsa/leetcode/#1-contains-duplicate","title":"1. Contains duplicate","text":"Solution  <pre><code># O(n)\ndef containsDuplicate(nums):\n    myset = set()\n    for n in nums:\n        if n in myset:\n            return True\n        myset.add(n)\n    return False\n\nnums1 = [1,2,3,1]\nprint(containsDuplicate(nums1))\n\nnums2 = [1,2,3,4]\nprint(containsDuplicate(nums2))\n\nnums3 = [1,1,1,3,3,4,3,2,4,2]\nprint(containsDuplicate(nums3))\n</code></pre>"},{"location":"python/dsa/leetcode/#2-valid-anagram","title":"2. Valid anagram","text":"Solution  <pre><code>Conditions for anagram:\n- Both string (s and t) length should be equal\n- Number of individual characters should be equal\n</code></pre> <pre><code># O(n)\ndef is_anagram(s, t):\n    if len(s) != len(t):\n        return False\n\n    s_count = {}\n    t_count = {}\n\n    for char in s:\n        s_count[char] = s_count.get(char, 0) + 1\n\n    for char in t:\n        t_count[char] = t_count.get(char, 0) + 1\n\n    return s_count == t_count\n\ns = \"anagram\"\nt = \"nagaram\"\nprint(is_anagram(s, t))\n</code></pre>"},{"location":"python/dsa/leetcode/#3-two-sum","title":"3. Two sum","text":"Solution  <pre><code>- Hashmap (key \"num\", value \"index\")\n- Take difference of target and \"num\"\n- Check if the difference value exists in hashmap\n</code></pre> <pre><code># O(n)\ndef two_sum(nums, target):\n    mydict = {}\n    for i, n in enumerate(nums):\n        diff = target - n\n        if diff in mydict:\n            return [mydict[diff], i]\n        mydict[n] = i\n    return []\n\nnums = [2,15,11,7]\ntarget = 9\nprint(two_sum(nums, target))\n</code></pre>"},{"location":"python/dsa/leetcode/#4-valid-palindrome","title":"4. Valid palindrome","text":"Solution  <pre><code># Extra memory\n\n- Filter alphanumeric characters\n- Compare \"s\" with reverse of \"s\"\n</code></pre> <pre><code># O(n)\ndef is_palindrome(s):\n    temp_s = \"\"\n    for char in s:\n        if char.isalnum():\n            temp_s += char.lower()\n\n    if temp_s == temp_s[::-1]:\n        return True\n    return False\n\ns = \"A man, a plan, a canal: Panama\"\nprint(is_palindrome(s))\n\ns = \"race a car\"\nprint(is_palindrome(s))\n\ns = \" \"\nprint(is_palindrome(s))\n</code></pre> <pre><code># Two pointer solution\n\n- Take two pointers \"left\" and \"right\"\n- If char is not alphanumeric than just increment the pointer\n- Compare \"left\" character with \"right\" character\n- Increment the pointer till while condition is met\n</code></pre> <pre><code># O(n)\ndef is_palindrome(s):\n    left, right = 0, len(s) - 1\n\n    while left &lt; right:\n        while left &lt; right and not s[left].isalnum():\n            left += 1\n        while left &lt; right and not s[right].isalnum():\n            right -= 1\n        if s[left].lower() != s[right].lower():\n            return False\n        left += 1\n        right -= 1\n    return True\n\ns = \"A man, a plan, a canal: Panama\"\nprint(is_palindrome(s))\n\ns = \"race a car\"\nprint(is_palindrome(s))\n\ns = \" \"\nprint(is_palindrome(s))\n</code></pre>"},{"location":"python/dsa/leetcode/#5-best-time-to-buy-and-sell-stock","title":"5. Best time to buy and sell stock","text":"Solution  <pre><code># O(n)\ndef max_profit(prices):\n    if len(prices) == 0:\n        return 0\n\n    max_profit = 0\n    min_price = prices[0]\n\n    for price in prices:\n        if price &lt; min_price:\n            min_price = price\n        else:\n            max_profit = max(max_profit, price - min_price)\n    return max_profit\n\nprices = [7,1,5,3,6,4]\nprint(max_profit(prices))\n\nprices = [7,6,4,3,1]\nprint(max_profit(prices))\n\nprices = []\nprint(max_profit(prices))\n</code></pre>"},{"location":"python/dsa/leetcode/#6-valid-parentheses","title":"6. Valid parentheses","text":"Solution  <pre><code># O(n)\ndef is_valid(s):\n    stack = []      # store open bracket\n    mymap = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in s:\n        if char in mymap:\n            if len(stack) &gt; 0:\n                top = stack.pop()\n            if top != mymap[char]:\n                return False\n        else:\n            stack.append(char)\n\n    if len(stack) == 0:\n        return True\n    return False\n\n# Example usage\ns1 = \"()\"\nprint(is_valid(s1))\n\ns2 = \"()[]{}\"\nprint(is_valid(s2))\n\ns3 = \"(]\"\nprint(is_valid(s3))\n\ns4 = \"(\"\nprint(is_valid(s4))\n\ns5 = \"(({[]}))\"\nprint(is_valid(s5))\n</code></pre>"},{"location":"python/dsa/leetcode/#7-binary-search","title":"7. Binary search","text":"Solution  <pre><code># linear search\n# O(n)\ndef search(nums, target):\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\nn1 = [-1,0,3,5,9,12]\nt1 = 9\nprint(search(n1, t1))\n\nn2 = [-1,0,3,5,9,12]\nt2 = 2\nprint(search(n2, t2))\n</code></pre> <pre><code># O(log n)\ndef search(nums, target):\n    left, right = 0, len(nums) - 1\n    while left &lt;= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] &lt; target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\nn1 = [-1,0,3,5,9,12]\nt1 = 9\nprint(search(n1, t1))\n\nn2 = [-1,0,3,5,9,12]\nt2 = 2\nprint(search(n2, t2))\n</code></pre>"},{"location":"python/fundamentals/fast_api/","title":"Notes","text":""},{"location":"python/fundamentals/fast_api/#python-type-hints","title":"Python type hints","text":"<ul> <li>The <code>typing</code> module in Python provides support for type hints.</li> <li>Type hints are a way to indicate the expected types of values in function signatures, variables, and other places where types are relevant.</li> </ul> <pre><code>@api.get('/api/add')\ndef calculate(x: int, y: int):\n    value = x + y\n    return {\n        'x': x,\n        'y': y,\n        'value': value\n    }\n</code></pre>"},{"location":"python/fundamentals/fast_api/#pydantic-model-example-aka-basemodel","title":"Pydantic model example (a.k.a BaseModel)","text":"<pre><code># API config\n@api_router.get(\"/\", response_model=schemas.Msg, status_code=200)\ndef root() -&gt; dict: # (1)\n    return {\"msg\": \"This is the Example API\"}\n\n# schema\nfrom pydantic import BaseModel\n\nclass Msg(BaseModel):\n    msg: str\n</code></pre> <ol> <li>Function specified below decorator is called a path operator function as it is associated with a specific path and HTTP method.</li> </ol>"},{"location":"python/fundamentals/fast_api/#pydantic-classes-for-defining-app-config-aka-basesettings","title":"Pydantic classes for defining app config (a.k.a BaseSettings)","text":"<pre><code>class LoggingSettings(BaseSettings):\n    # logging levels are ints\n    LOGGING_LEVEL: int = logging.INFO # (1)\n\nclass DBSettings(BaseSettings):\n    SQLALCHEMY_DATABASE_URI: str\n\nclass Settings(BaseSettings):\n    # 60 minutes * 24 hours * 8 = 8 days\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 * 24 * 8\n\n    logging: LoggingSettings = LoggingSettings()\n    db: SQLLiteSettings = DBSettings()\n</code></pre> <ol> <li>argument with a default parameter</li> </ol>"},{"location":"python/fundamentals/fast_api/#dependency-injection-aka-handle-code-requirements","title":"Dependency injection (a.k.a. handle code requirements)","text":"<pre><code># inject database dependency\n\nfrom fastapi import Depends\n\n# dependency function\ndef get_db() -&gt; t.Generator:\n    # SQLAlchemy ORM session\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n# API config\n@api_router.post(\"/signup\", response_model=schemas.User, status_code=201)\ndef create_user_signup(\n    # \"Depends\" specify database dependency\n    *, db: Session = Depends(deps.get_db), user_in: schemas.CreateUser, # (1)\n    ) -&gt; Any:\n    \"\"\"\n    Create new user without the need to be logged in.\n    \"\"\"\n    user = db.query(User).filter(User.email == user_in.email).first()\n    ...\n</code></pre> <ol> <li> <p>asterisk (*) : Keyword-only arguments marker enforces use of keyword arguments to call the function, making the code     more readable and less error-prone, especially when dealing with functions that have multiple parameters.</p> <p>Example of calling function with keyword arguments: <code>example = create_user_signup(db=db_session, user_in=user_data)</code></p> </li> </ol>"},{"location":"python/fundamentals/fast_api/#in-process-background-tasks","title":"In-process background tasks","text":"<pre><code>@router.post(\"/send-password-reset\", status_code=200)\ndef send_password_reset(\n    background_tasks: BackgroundTasks,\n    user_in: schemas.UserPasswordResetEmail,\n    ) -&gt; Any:\n    # Trigger email (asynchronous)\n    background_tasks.add_task(\n        send_password_reset_email,\n        user=user_in,\n    )\n</code></pre>"},{"location":"python/fundamentals/fast_api/#sqlalchemy","title":"SQLAlchemy","text":"<p>TL;DR: Applying @as_declarative to the Base class sets the stage for creating declarative base classes, and SQLAlchemy uses the class_registry to keep track of these classes for various ORM operations.</p> <pre><code>import typing as t\nfrom sqlalchemy.ext.declarative import as_declarative, declared_attr\n\nclass_registry: t.Dict = {}\n\n@as_declarative(class_registry=class_registry)\nclass Base:\n    id: t.Any\n    __name__: str\n\n    # Generate __tablename__ automatically\n    @declared_attr\n    def __tablename__(cls) -&gt; str:\n        return cls.__name__.lower()\n</code></pre>"},{"location":"python/fundamentals/fast_api/#as_declarative-on-base-class","title":"@as_declarative on Base class","text":"<ul> <li>Applying @as_declarative to the Base class means that any class inheriting from Base will become a declarative base class.</li> </ul>"},{"location":"python/fundamentals/fast_api/#inheritance-and-class-registry","title":"Inheritance and Class Registry","text":"<ul> <li>When we create a class that inherits from Base, it inherits the characteristics needed for SQLAlchemy to understand it as a declarative base class.</li> <li>The class_registry dictionary is used by SQLAlchemy to keep track of these classes.</li> </ul>"},{"location":"python/fundamentals/fast_api/#automatic-table-naming","title":"Automatic Table Naming","text":"<ul> <li>The tablename method (decorated with @declared_attr) is a special method that SQLAlchemy recognizes.</li> <li>It automatically generates the name of the database table associated with the class.<ul> <li>In this case, it's using the lowercase name of the class.</li> </ul> </li> </ul>"},{"location":"python/fundamentals/fast_api/#using-declarative-base-classes","title":"Using Declarative Base Classes","text":"<ul> <li>Once we have declarative base classes, we can use them to define and interact with database tables.</li> <li>SQLAlchemy provides an ORM (Object-Relational Mapping) system that allows us to work with database records as if they were Python objects.</li> </ul>"},{"location":"python/fundamentals/python_basics/","title":"Python basics","text":"Primitive data structures in Python  <pre><code>| Date Structure | Ordered | Mutable | Allow Duplicate | Constructor   | Example                    |\n| -------------- | ------- |-------- | --------------- | ------------- | -------------------------- |\n| List           | Yes     | Yes     | Yes             | [] or list()  | [5, \"yes\", 2.7]            |\n| Tuple          | Yes     | No      | Yes             | () or tuple() | (5, \"yes\", 2.7)            |\n| Dictionary     | Yes     | Yes     | No              | set()         | {\"name\": \"Raj\", \"age\": 35} |\n| Set            | No      | Yes     | NO              | {} or dict()  | {5, \"yes\", 2.7}            |\n</code></pre>"},{"location":"python/fundamentals/python_exercises/","title":"Exercises","text":"<p>Perform below multi line assignment in a single line.</p> <pre><code>n = 0.125\nm = \"abc\"\nz = False\n</code></pre> Solution <pre><code>n, m, z = 0.125, \"abc\", False\nprint(n)\nprint(m)\nprint(z)\n</code></pre> <p>String exercises</p> <ul> <li>Create a string <code>Hello, World!</code></li> <li>Just print <code>,</code> from the string</li> <li>Get the characters from position 2 to position 5 (not included)</li> <li>Print only the characters at even position</li> <li>Replace <code>\"H\"</code> with <code>\"Y\"</code></li> <li>Split 'My name is Rajdeep' to a list of substrings</li> <li>Remove any whitespace from beginning or end of <code>\" Hello, World! \"</code></li> <li>Combine a list of strings <code>[\"ab\", \"cd\", \"ef\"]</code> with an empty string delimitor</li> </ul> Solution <pre><code>print('\\n1. Create a string `Hello, World!`')\nmy_str = \"Hello, World!\"\nprint(my_str)\n\n\nprint('\\n2. Just print `,` from the string')\nprint(my_str[5])\n\n\nprint('\\n3. Get the characters from position 2 to position 5 (not included)')\nprint(my_str[1:5])\n\n\nprint('\\n4. Print only the characters at even position')\nprint(my_str[::2])\n\n\nprint('\\n5. Replace `\"H\"` with `\"Y\"`')\nprint(my_str.replace(\"H\", \"Y\"))\n\n\nprint('\\n6. Split \"My name is Rajdeep\" to a list of substrings')\nmy_str = \"My name is Rajdeep\"\nprint(my_str.split())\n\n\nprint('\\n7. Remove any whitespace from beginning or end of `\" Hello, World! \"`')\nmy_str = \" Hello, World! \"\nprint(my_str.strip())\n\n\nprint('\\n8. Combine a list of strings `[\"ab\", \"cd\", \"ef\"]` with an empty string delimitor')\nstr_list = [\"ab\", \"cd\", \"ef\"]\nprint(\" \".join(str_list))\n</code></pre> <p>List exercises</p> <ul> <li>Create a list of names containing <code>\"John\", \"Alice\", \"Sarah\", \"Rajna\", \"George\"</code> using list() constructor</li> <li>Print number of items in the list</li> <li>Print <code>\"Alice\", \"Sarah\", Rajna</code> from the list</li> <li>Retrieve <code>\"George\"</code></li> <li>Retrieve <code>\"Sarah\"</code></li> <li>Replace <code>\"John\"</code> with <code>\"Jenny\"</code></li> <li>Replace <code>\"Jenny\", \"Alice\"</code> with <code>\"John\", \"Maya\"</code></li> <li>Add <code>\"Simon\"</code></li> <li>Add <code>\"Betty\"</code> before <code>\"Sarah\"</code></li> <li>Remove <code>\"John\"</code></li> <li>Remove element at index 2</li> <li>Remove the last element</li> <li>Add list <code>fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\"]</code> to names</li> <li>From <code>fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\"]</code>, print all fruits that has <code>a</code> in its name using list comprehension</li> <li>Reverse the order of list <code>fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\"]</code></li> <li>Sort list numerically <code>num = [100, 50, 65, 82, 23]</code></li> <li>Sort above list in descending order</li> <li>Join fruits and num list to a new list</li> <li>Clear fruits list</li> <li>Delete num list</li> </ul> Solution <pre><code>print('\\n1. Create a list of names containing `\"John\", \"Alice\", \"Sarah\", \"Rajna\", \"George\"` using list() constructor\\n')\nnames = list((\"John\", \"Alice\", \"Sarah\", \"Rajna\", \"George\"))\nprint(names)\n\nnames = list()\nnames.append(\"John\")\nnames.append(\"Alice\")\nnames.append(\"Sarah\")\nnames.append(\"Rajna\")\nnames.append(\"George\")\nprint(names)\n\n\nprint('\\n2. Print number of items in the list\\n')\nprint(f\"No of items: {len(names)}\")\n\n\nprint('\\n3. Print `\"Alice\", \"Sarah\", Rajna` from the list\\n')\nprint(names[1:4])\n\n\nprint('\\n4. Retrieve `\"George\"`\\n')\nprint(names[-1])\n\n\nprint('\\n5. Retrieve `\"Sarah\"`\\n')\nprint(names[2])\n\n\nprint('\\n6. Replace `\"John\"` with `\"Jenny\"`\\n')\nnames[0] = \"Jenny\"\nprint(names)\n\n\nprint('\\n7. Replace `\"Jenny\", \"Alice\"` with `\"John\", \"Maya\"`\\n')\nnames[0:2] = [\"John\", \"Maya\"]\nprint(names)\n\n\nprint('\\n8. Add `\"Simon\"`\\n')\nnames.append(\"Simon\")\nprint(names)\n\n\nprint('\\n9. Add `\"Betty\"` before `\"Sarah\"`\\n')\nnames.insert(2, \"Betty\")\nprint(names)\n\n\nprint('\\n10. Remove `\"John\"`\\n')\nnames.remove(\"John\")\nprint(names)\n\n\nprint('\\n11. Remove element at index 2\\n')\nnames = ['Maya', 'Betty', 'Sarah', 'Rajna', 'George', 'Simon']\nnames.remove(names[2])\nprint(names)\n\nnames = ['Maya', 'Betty', 'Sarah', 'Rajna', 'George', 'Simon']\nnames.pop(2)\nprint(names)\n\n\nprint('\\n12. Remove the last element\\n')\nnames.pop()\nprint(names)\n\n\nprint('\\n13. Add list `fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\"]` to names\\n')\nfruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\"]\nnames.extend(fruits)\nprint(names)\n\n\nprint('\\n14. From `fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\"]`, print all fruits that has `a` in its name using list comprehension\\n')\nfruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\"]\nprint([fruit for fruit in fruits if \"a\" in fruit])\n\n\nprint('\\n15. Reverse the order of list `fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\"]`\\n')\nfruits.reverse()\nprint(fruits)\n\nfruits.sort(reverse=True)\nprint(fruits)\n\n\nprint('\\n16. Sort list numerically `num = [100, 50, 65, 82, 23]`\\n')\nnum = [100, 50, 65, 82, 23]\nnum.sort()\nprint(num)\n\n\nprint('\\n17. Sort above list in descending order\\n')\nnum = [100, 50, 65, 82, 23]\nnum.sort(reverse=True)\nprint(num)\n\n\nprint('\\n18. Join fruits and num list to a new list\\n')\nnew_list = fruits + num\nprint(new_list)\n\n\nprint('\\n19. Clear fruits list\\n')\nprint(fruits)\nfruits.clear()\nprint(fruits)\n\n\nprint('\\n20. Delete num list\\n')\nprint(num)\ndel num\nprint(num)\n</code></pre> <p>Tuple exercises</p> <ul> <li>Create a tuple of names<code>\"John\", \"Sarah\", \"Alice\"</code> using tuple() constructor</li> <li>Create a tuple of single name <code>\"Maya\"</code></li> <li>Add name to names</li> <li>Retrieve <code>\"Sarah\"</code></li> <li>Add <code>\"Simon\"</code></li> <li>Rmove <code>\"John\"</code></li> <li>Is there any workaround for add and remove?</li> <li>Unpack tuple <code>fruits = (\"apple\", \"banana\", \"kiwi\")</code> as per their color and print their values</li> <li>Delete fruits tuple</li> </ul> Solution <pre><code>print('\\n1. Create a tuple of names`\"John\", \"Sarah\", \"Alice\"` using tuple() constructor\\n')\nnames = tuple((\"John\", \"Sarah\", \"Alice\"))\nprint(names)\n\n\nprint('\\n2. Create a tuple of single name `\"Maya\"`\\n')\nname = (\"Maya\",)\nprint(name)\n\n\nprint('\\n3. Add name to names\\n')\nnames += name\nprint(names)\n\n\nprint('\\n4. Retrieve `\"Sarah\"`\\n')\nprint(names[1])\n\n\nprint('\\n5. Add `\"Simon\"``\\n')\nprint(\"Cannot add items to a Tuple as it is immutable\\n\")\n\n\nprint('\\n6. Rmove `\"John\"`\\n')\nprint(\"Cannot remove items from a Tuple as it is immutable\\n\")\n\n\nprint('\\nIs there any workaround for add and remove?\\n')\nprint(names)\nnames = list(names)\nnames.append(\"Simon\")\nprint(tuple(names))\n\nnames = list(names)\nnames.remove(\"Simon\")\nprint(tuple(names))\n\n\nprint('\\n7. Unpack tuple `fruits = (\"apple\", \"banana\", \"cherry\")` as per their color and print their values\\n')\nfruits = (\"apple\", \"banana\", \"cherry\")\ngreen, yellow, red = fruits\nprint(f\"Green : {green}\")\nprint(f\"Yellow : {yellow}\")\nprint(f\"Red : {red}\")\n\n\nprint('\\n8. Delete fruits tuple\\n')\nprint(fruits)\ndel fruits\nprint(fruits)\n</code></pre> <p>Nested collections</p> <ul> <li>Retrieve <code>('Eternal Sunshine of the Spotless Mind', 2004)</code></li> <li>Retrieve <code>Eternal Sunshine of the Spotless Mind</code></li> </ul> <pre><code>movies = [\n    ('Eternal Sunshine of the Spotless Mind', 2004),\n    ('Memento', 2000)\n]\n</code></pre> Solution <pre><code>print(\"1. Retrieve `('Eternal Sunshine of the Spotless Mind', 2004)`\")\nprint(movies[0])\n\nprint('\\n2. Retrieve `Eternal Sunshine of the Spotless Mind`')\nprint(movies[0][0])\n</code></pre> <p>Dictionary exercises</p> <ul> <li>Create a dictionary called <code>student</code>, wherein student name is <code>\"John Smith\"</code> and his grades are <code>88, 76, 92, 85, 69</code></li> <li>Print student grades</li> <li>Add student age = 14</li> <li>Print <code>John Smith is 14 years old and his grades are 88, 76, 92, 85, 69</code>    # with and without for loop</li> <li>Create a dictionary called <code>school</code> using dict() constructor with school name and location'</li> <li>Merge student dictionary with school dictionary     # check name key</li> <li>Update student age to 18</li> <li>Delete grades</li> <li>List all keys</li> <li>List all values</li> <li>List all items</li> <li>Iterate and print all keys</li> <li>Iterate and print all values</li> <li>Iterate and print both keys value pairs</li> <li>Remove <code>location</code></li> <li>Remove last item</li> <li>Remove all items</li> <li>Delete student dictionary</li> </ul> Solution <pre><code>print('\\n 1. Create a dictionary called `student`, wherein student name is `\"John Smith\"` and his grades are `88, 76, 92, 85, 69`')\nstudent = {\n    \"name\": \"John Smith\",\n    \"grades\": [88, 76, 92, 85, 69]\n}\nprint(student)\n\n\nprint('\\n 2. Print student grades')\nprint(student[\"grades\"])\n\n\nprint('\\n 3. Add student age = 14')\nstudent[\"age\"] = 14\nprint(student)\n\n\nprint('\\n 4. Print `John Smith is 14 years old and his grades are 88, 76, 92, 85, 69`')\nprint(f'{student[\"name\"]} is {student[\"age\"]} years old and his grades are {\", \".join(map(str, student[\"grades\"]))}')\nprint(f\"John Smith is {student['age']} years old and his grades are {' '.join(str(grade) for grade in student['grades'])}\")\n\n\nprint('\\n 5. Create a dictionary called `school` using dict() constructor with school name and location')\nschool = dict({\"name\": \"LES\", \"location\": \"Mirik\"})\nprint(school)\n\n\nprint('\\n 6. Merge student dictionary with school dictionary     # check name key')\nstudent.update(school)\nprint(student)\n\n# merge operator (|)\nstudent = student | school\nprint(student)\n\n\nprint('\\n 7. Update student age to 18')\nstudent[\"age\"] = 18\nprint(student)\n\n\nprint('\\n 8. Delete grades')\ndel student[\"grades\"]\nprint(student)\n\n\nprint('\\n 9. List all keys')\nprint(student.keys())\n\n\nprint('\\n 10. List all values')\nprint(student.values())\n\n\nprint('\\n 11. List all items')\nprint(student.items())\n\n\nprint('\\n 12. Iterate and print all keys')\nfor key in student.keys():\n    print(key)\n\n\nprint('\\n 13. Iterate and print all values')\nfor value in student.values():\n    print(value)\n\n\nprint('\\n 14. Iterate and print both keys value pairs')\nfor key, value in student.items():\n    print(f\"{key} : {value}\")\n\n\nprint('\\n 15. Remove `location`')\nprint(student.pop(\"location\"))\nprint(student)\n\n\nprint('\\n 16. Remove last item')\nprint(f\"Last item: {student.popitem()}\")\nprint(student)\n\n\nprint('\\n 17. Remove all items')\nprint(student)\nstudent.clear()\nprint(student)\n\n\nprint('\\n 18. Delete student dictionary')\nprint(student)\ndel student\nprint(student)\n</code></pre> <p>Set exercises</p> <ul> <li>Create an empty set <code>set1</code></li> <li>Add three items <code>\"apple\", \"banana\", \"cherry\"</code></li> <li>Print <code>\"apple\"</code> </li> <li>Create a second set <code>set2</code> using set() constructor with at least one common item with the first set</li> <li>Find the union, symmetric difference, and intersection of the two sets</li> <li>Add set1 and set2</li> <li>Remove <code>\"pineapple\"</code></li> <li>Remove any random item</li> <li>Remove all items</li> <li>Delete set1</li> </ul> Solution <pre><code>print('\\n1. Create an empty set `set1`')\nset1 = set()\nprint(set1)\n\nprint('\\n2. Add three items `\"apple\", \"banana\", \"cherry\"`')\nset1.add(\"apple\")\nset1.add(\"banana\")\nset1.add(\"cherry\")\nprint(set1)\n\nprint('\\n3. Print `\"apple\"`')\nprint(\"Cannot access items in a set using index or key as it is unordered\")\n\nprint('\\n4. Create a second set `set2` using set() constructor with at least one common item with the first set')\nset2 = set((\"apple\", \"mango\", \"pineapple\"))\nprint(set2)\n\nprint('\\n5. Find the union, symmetric difference, and intersection of the two sets')\nprint(f\"Union                   : {set1.union(set2)}\")\nprint(f\"Symmetric difference    : {set1.symmetric_difference(set2)}\")\nprint(f\"Intersection            : {set1.intersection(set2)}\")\n\nprint('\\n6. Add set1 and set2')\nset1.update(set2)\nprint(set1)\n\nprint('\\n7. Remove `\"pineapple\"`')\nset1.remove(\"pineapple\")\nprint(set1)\n\nprint('\\n8. Remove any random item')\nset1.pop()\nprint(set1)\n\nprint('\\n9. Remove all items')\nset1.clear()\nprint(set1)\n\nprint('\\n10. Delete set1')\nprint(set1)\ndel set1\nprint(set1)\n</code></pre> <p>deque exercises</p> <ul> <li>Create double-ended queue <code>[4, 5, 6]</code></li> <li>Append <code>7</code> to the right</li> <li>Append <code>3</code> to the left</li> <li>Append <code>[8, 9, 10]</code> to right</li> <li>Append <code>[1, 2]</code> to left</li> <li>Insert <code>-1</code> at index 5</li> <li>Remove element from the right end</li> <li>Remove element from the left end</li> <li>Remove <code>-1</code></li> <li>Count the number of times <code>5</code> occurs</li> <li>Return index of <code>7</code></li> <li>Rotate deque three times to the right</li> <li>Reverse deque</li> </ul> Solution <pre><code>print('\\nCreate double-ended queue `[4, 5, 6]`.')\nfrom collections import deque\ndq = deque([4, 5, 6])\nprint(dq)\n\nprint('\\nAppend `7` to the right')\ndq.append(7)\nprint(dq)\n\nprint('\\nAppend `3` to the left')\ndq.appendleft(3)\nprint(dq)\n\nprint('\\nAppend `[8, 9, 10]` to right')\ndq.extend([8, 9, 10])\nprint(dq)\n\nprint('\\nAppend `[1, 2]` to left')\ndq.extendleft([1, 2])\nprint(dq)\n\nprint('\\nInsert `-1` at index 5')\ndq.insert(5, -1)\nprint(dq)\n\nprint('\\nRemove element from the right end')\ndq.pop()\nprint(dq)\n\nprint('\\nRemove element from the left end')\ndq.popleft()\n\nprint('\\nRemove `-1`')\ndq.remove(-1)\nprint(dq)\n\nprint('\\nCount the number of times `5` occurs')\nprint(dq.count(5))\n\nprint('\\nReturn index of `7`')\nprint(dq)\nprint(dq.index(7))\n\nprint('\\nRotate deque three times to the right')\ndq.rotate(3)\nprint(dq)\n\nprint('\\nReverse deque')\ndq.reverse()\nprint(dq)\n</code></pre>"},{"location":"python/fundamentals/python_quiz/","title":"Quiz","text":"List primitive data structures in Python? Date Structure Ordered Mutable Allow Duplicate Constructor Example List Yes Yes Yes [] or list() [5, \"yes\", 2.7] Tuple Yes No Yes () or tuple() (5, \"yes\", 2.7) Dictionary Yes Yes No set() {\"name\": \"Raj\", \"age\": 35} Set No Yes NO {} or dict() {5, \"yes\", 2.7}"},{"location":"terraform/terraform/","title":"Notes","text":"<p>Terraform workflow (1)</p> <ol> <li> <ul> <li>Write Terraform code/configuration file</li> <li>Initialize Terraform working directory\u2192terraform init</li> <li>Generate an execution plan for Terraform\u2192terraform plan</li> <li>Execute changes to infrastructure\u2192terraform apply </li> <li>Destroy Terraform managed infrastructure\u2192terraform destroy</li> <li>Apply formatting and style adjustments to a configuration\u2192terraform fmt</li> </ul> </li> </ol>"}]}